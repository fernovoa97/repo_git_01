/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sistemareservahospedajes;

import Controller.Reserva;
import Controller.Habitacion;
import Controller.Cliente;
import com.toedter.calendar.JDateChooser;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Alejandro
 */
public class FormularioReserva extends javax.swing.JFrame {

    /**
     * Creates new form FormularioReserva
     */
    List<Cliente> listaClientes = new ArrayList<Cliente>();
    List<Reserva> listaReservas = new ArrayList<Reserva>();
    List<Habitacion> lstHabDisponibles = new ArrayList<Habitacion>();
    List<Habitacion> lstNumeroHabitaciones = new ArrayList<Habitacion>();
    
    
    String datos[][]={};
    String columna[]={"Codigo","Nombre","Apellidos","DNI","Telefono"};        
    DefaultTableModel modeloTabla = new DefaultTableModel(datos,columna)
    {
        @Override
        public boolean isCellEditable(int row, int column)
        {
            return false;
        }
    };
    Date fechaActual = new Date();
    SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/YYYY");
            
    public FormularioReserva() {
        initComponents();
        this.setLocationRelativeTo(null);
        leeDatosCliente();
        leeHabitacionesDisponibles();
        leeDatosReservaHabitacion();
        
        generarComboBoxHabitaciones();
        generarTabla();
        
        jDateInicio.setMinSelectableDate(fechaActual);
        jDateFin.setMinSelectableDate(fechaActual);


        
        String nombreReserva = listaClientes.get(filaSeleccionada).getNombre();
        String apellidosReserva = listaClientes.get(filaSeleccionada).getApellidos();
        String dniReserva = listaClientes.get(filaSeleccionada).getDni();
        String telefonoReserva = listaClientes.get(filaSeleccionada).getTelefono();
        
    }
    
    public static String texto2 = "";
    public static int filaSeleccionada = 0;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        btnGuardar = new javax.swing.JButton();
        btnAtras = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaClientes = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtBuscar = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jDateInicio = new com.toedter.calendar.JDateChooser();
        jLabel13 = new javax.swing.JLabel();
        jDateFin = new com.toedter.calendar.JDateChooser();
        jLabel14 = new javax.swing.JLabel();
        btnCalcularDias = new javax.swing.JButton();
        txtDias = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        txtPrecio = new javax.swing.JTextField();
        txtMonto = new javax.swing.JTextField();
        btnAñadir = new javax.swing.JButton();
        cmbHabitacion = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        txtTipoHabitacion = new javax.swing.JTextField();

        jButton1.setText("jButton1");

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnAtras.setText("Atras");
        btnAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtrasActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jList1);

        jLabel1.setText("Reserva de habitación");

        jLabel2.setText("Buscar o seleccionar datos de clientes ya existentes");

        jLabel4.setText("Nº Habitación:");

        tablaClientes.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        tablaClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ));
        tablaClientes.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tablaClientes.setRowHeight(23);
        tablaClientes.getTableHeader().setReorderingAllowed(false);
        tablaClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaClientesMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tablaClientes);

        jLabel9.setFont(new java.awt.Font("Sitka Text", 1, 24)); // NOI18N
        jLabel9.setText("Registro de Nueva Reserva");

        jLabel10.setText("Buscar:");

        txtBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscarActionPerformed(evt);
            }
        });

        jLabel11.setText("Tipo de habitación:");

        jLabel12.setText("Día de ingreso:");

        jLabel13.setText("Día de salida:");

        jDateFin.setMinSelectableDate(jDateInicio.getMinSelectableDate());

        jLabel14.setText("Días a hospedarse:");

        btnCalcularDias.setText("Calcular");
        btnCalcularDias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularDiasActionPerformed(evt);
            }
        });

        txtDias.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDias.setEnabled(false);
        txtDias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDiasActionPerformed(evt);
            }
        });

        jLabel15.setText("Precio:");

        jLabel16.setText("Monto:");

        txtPrecio.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        txtPrecio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPrecioActionPerformed(evt);
            }
        });

        txtMonto.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtMonto.setEnabled(false);
        txtMonto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMontoActionPerformed(evt);
            }
        });

        btnAñadir.setText("Añadir Nuevos Clientes");
        btnAñadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAñadirActionPerformed(evt);
            }
        });

        cmbHabitacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar" }));
        cmbHabitacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbHabitacionActionPerformed(evt);
            }
        });

        jLabel3.setText("*No olvides siempre de presionar el boton Calcular*");

        txtTipoHabitacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTipoHabitacionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(304, 304, 304)
                        .addComponent(jLabel9))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(145, 145, 145)
                                .addComponent(btnAñadir, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(32, 32, 32)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(83, 83, 83)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(jLabel13)
                                .addGap(18, 18, 18)
                                .addComponent(jDateFin, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbHabitacion, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(txtTipoHabitacion, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jDateInicio, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(13, 13, 13))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel15)
                                                .addComponent(jLabel14))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(61, 61, 61)
                                                .addComponent(jLabel16)))
                                        .addGap(27, 27, 27)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtMonto, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(btnGuardar)
                                                    .addComponent(btnCalcularDias))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(btnAtras)
                                                    .addComponent(txtDias, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(7, 7, 7)))))))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(jLabel1)
                                .addGap(41, 41, 41)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(cmbHabitacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(txtTipoHabitacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12)
                                    .addComponent(jDateInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13)
                                    .addComponent(jDateFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(13, 13, 13)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtDias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnCalcularDias)
                                    .addComponent(jLabel14))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel15)
                                    .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16)
                                    .addComponent(txtMonto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnGuardar)
                                    .addComponent(btnAtras)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(btnAñadir)
                                .addGap(42, 42, 42)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(31, 31, 31)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(19, 19, 19)))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtrasActionPerformed
        // TODO add your handling code here:
        Menu menu = new Menu();
        menu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnAtrasActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        int fila = tablaClientes.getSelectedRow();
        boolean estado1 = false;
        boolean estado2 = false;
        //boolean bandera = false;
        String fReserva = String.valueOf(fechaActual);
        String fIngresoReserva = formatoFecha.format(jDateInicio.getDate());
        String fSalidaReserva = formatoFecha.format(jDateFin.getDate());
        String HabitacionReserva = String.valueOf(cmbHabitacion.getSelectedItem());
        String tipoHabReserva = String.valueOf(txtTipoHabitacion.getText());
        float costoReserva = Float.parseFloat(txtPrecio.getText());
        float montoTotalReserva = Float.parseFloat(txtMonto.getText());
        String nombreReserva = listaClientes.get(filaSeleccionada).getNombre();
        String apellidosReserva = listaClientes.get(filaSeleccionada).getApellidos();
        String dniReserva = listaClientes.get(filaSeleccionada).getDni();
        String telefonoReserva = listaClientes.get(filaSeleccionada).getTelefono();
        Reserva reserva = new Reserva(fReserva,fIngresoReserva,fSalidaReserva,HabitacionReserva,tipoHabReserva,
                        costoReserva,montoTotalReserva,nombreReserva,apellidosReserva,dniReserva,telefonoReserva);

        if(fila>=0)
        {
        String habCambiar;
            if(cmbHabitacion.getSelectedItem()!="Seleccionar")
            {
                listaReservas.add(reserva);
                
                for(int i=0;i<lstHabDisponibles.size();i++)
                {
                    for(int j=0;j<listaReservas.size();j++)
                    {
                        habCambiar = lstHabDisponibles.get(i).getNumeroHabitacion();
                        if(habCambiar.equals(listaReservas.get(j).getNumeroHabitacion()))
                        {
                            this.lstHabDisponibles.get(i).setEstado("NoDisponible");
                        }
                    }
                }
                
                generaArchivoHabitacionDisponible();
                generaArchivoReservaHabitacion();
                
                JOptionPane.showMessageDialog(this, "La reserva se ha realizado con éxito."); 
                Menu menu = new Menu();
                menu.setVisible(true);
                this.dispose();   
            }
            else{
            JOptionPane.showMessageDialog(this, "Rellene todos los campos correctamente.");
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Seleccionar una fila con los datos de los clientes.");
        }

        
        
        /*Aqui realizaremos el codigo para hacer que los datos no se repitan*/
        
        //POR AHORA NO VA A SERVIR
        /* 
        for(int i=0;i<this.listaClientes.size();i++)
        {
            if(nombre.equals(listaClientes.get(i).getNombre()))
            {
                estado1 = true;
            }
            if(apellidos.equals(listaClientes.get(i).getApellidos()))
            {
                estado2 = true;
            }
            if(dni.equals(listaClientes.get(i).getDni()))//el dni del textfield será comparado con todos los dni
            {//que se encuentran en la lista si un numero de dni se repite
                bandera = true;//la bandera solo será true si aquel dni que se escribio en el txt es el mismo para la lista           
            }
        }
        //si la bandera sale false, significa que el dni no se repite y este será automaticamente agregado en la lista
        if(bandera==false)
        {
            listaClientes.add(cliente);
            generaArchivoCliente();

            JOptionPane.showMessageDialog(this, "La reserva se ha realizado con éxito."); 
            Menu menu = new Menu();
            menu.setVisible(true);
            this.dispose();
        }
         //Y si la bandera es true, significa que el dni que se escribio en el txt se repite con el dni que se encuentra en la lista            
        //y por ende no podra ser guardado en la listaClientes, en este caso se va a omitir.
        else{
            if(estado1==true && estado2==true)
            {
                JOptionPane.showMessageDialog(this, "La reserva se ha realizado con éxito y sin repeticiones.");
                Menu menu = new Menu();
                menu.setVisible(true);
                this.dispose();       
            }
            else{
                JOptionPane.showMessageDialog(this, "EL DNI SE REPITE Y NO COINCIDE CON LOS DATOS");  
        
            }          
        }*/   
        
    }//GEN-LAST:event_btnGuardarActionPerformed
//APUNTE 
    private void tablaClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaClientesMouseClicked
        // TODO add your handling code here:
        filaSeleccionada = tablaClientes.rowAtPoint(evt.getPoint());
        System.out.println(filaSeleccionada);
    }//GEN-LAST:event_tablaClientesMouseClicked

    private void txtBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscarActionPerformed
        // TODO add your handling code here:
        String valorBuscar = txtBuscar.getText();
        for(int i=0; i<this.tablaClientes.getRowCount();i++)
        {
            if(tablaClientes.getValueAt(i, 3).equals(valorBuscar))
            {
                tablaClientes.requestFocus();
                tablaClientes.changeSelection(i, 3, false, false);
            }
        }
    }//GEN-LAST:event_txtBuscarActionPerformed

    private void btnCalcularDiasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularDiasActionPerformed
        // TODO add your handling code here:
        calcularDias(jDateInicio,jDateFin);
        float monto = Float.parseFloat(txtPrecio.getText())*(Float.parseFloat(txtDias.getText()));
        txtMonto.setText(String.valueOf(monto));
    }//GEN-LAST:event_btnCalcularDiasActionPerformed

    private void txtPrecioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPrecioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPrecioActionPerformed

    private void txtMontoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMontoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMontoActionPerformed

    private void txtDiasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDiasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDiasActionPerformed

    private void btnAñadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAñadirActionPerformed
        // TODO add your handling code here:
        FormularioAñadirNuevosClientes fAñadirNuevosClientes = new FormularioAñadirNuevosClientes();
        fAñadirNuevosClientes.setVisible(true);
        texto2 = "ReservaHabitacion";
        this.dispose();
    }//GEN-LAST:event_btnAñadirActionPerformed

    private void cmbHabitacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbHabitacionActionPerformed
        // TODO add your handling code here:
        String habitacion = (String)cmbHabitacion.getSelectedItem();
        for(int i=0;i<lstHabDisponibles.size();i++)
        {
            if(habitacion.equals(lstHabDisponibles.get(i).getNumeroHabitacion()))
            {
                txtTipoHabitacion.setText(lstHabDisponibles.get(i).getTipoHabitacion()); 
                txtPrecio.setText(String.valueOf(lstHabDisponibles.get(i).getCostoHabitacion()));
            }
        }
    }//GEN-LAST:event_cmbHabitacionActionPerformed

    private void txtTipoHabitacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTipoHabitacionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTipoHabitacionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormularioReserva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormularioReserva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormularioReserva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormularioReserva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormularioReserva().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtras;
    private javax.swing.JButton btnAñadir;
    private javax.swing.JButton btnCalcularDias;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JComboBox<String> cmbHabitacion;
    private javax.swing.JButton jButton1;
    private com.toedter.calendar.JDateChooser jDateFin;
    private com.toedter.calendar.JDateChooser jDateInicio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTable tablaClientes;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtDias;
    private javax.swing.JTextField txtMonto;
    private javax.swing.JTextField txtPrecio;
    private javax.swing.JTextField txtTipoHabitacion;
    // End of variables declaration//GEN-END:variables
    
    private void calcularDias(JDateChooser fechaInicio, JDateChooser fechaFin){
        if(fechaInicio.getDate()!=null && fechaFin.getDate()!=null){
            Calendar inicio = fechaInicio.getCalendar();
            Calendar fin = fechaFin.getCalendar();
            int dias=0;
            
            while(inicio.before(fin) || inicio.equals(fin)){
                dias++;
                inicio.add(Calendar.DATE, 1);
            }
            
            if(dias>0)
            {
                txtDias.setText(Integer.toString(dias));   
            }
            else
            {
                JOptionPane.showMessageDialog(null,"Error. El Día de Salida no debe de ser menor al Día de Ingreso.","",JOptionPane.ERROR_MESSAGE);
            }
        }else{
            if(fechaInicio.getDate()==null || fechaFin.getDate()==null){
                JOptionPane.showMessageDialog(null,"Seleccione las fechas de ingreso y salida","",JOptionPane.ERROR_MESSAGE);
            }
        }
        /*if(comboTipoHabitacion.getSelectedItem()=="Escoge una opcion")
        {
            JOptionPane.showMessageDialog(null,"Escoga un tipo de habitación correcta","",JOptionPane.ERROR_MESSAGE);   
        }*/
    }
    
    public void leeDatosCliente() {
        try{
            String codigo = "";
            String nombre = "";
            String apellidos = "";
            String dni = "";
            String telefono = "";
            

            File archivo = new File("DatosClientes.txt");
            FileReader fr = new FileReader(archivo);
            BufferedReader br = new BufferedReader(fr);   

            String lineaCurso1;
            String lineaCurso2;
            //si no hay nada para leer en el archivo txt, entonces esta parte se omitirá
            //hasta que por fin se agregue los datos de los clientes y se guarden en el archivo
            if((lineaCurso1=br.readLine()) != null)
            {   
                while((lineaCurso2=br.readLine())!=null)
                {
                    Cliente cliente = new Cliente(codigo,nombre,apellidos,dni,telefono);
                    cliente.setCodigoCliente(lineaCurso2);
                    cliente.setNombre(br.readLine());
                    cliente.setApellidos(br.readLine());
                    cliente.setDni(br.readLine());
                    cliente.setTelefono(br.readLine());
                    this.listaClientes.add(cliente);
                    br.readLine();         
                }
                fr.close();    
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Error en el sistema");
            e.printStackTrace();
        }
    }
    
    //ya no es necesario
    public void generaArchivoCliente() {
        try{
            PrintWriter writer = new PrintWriter("DatosClientes.txt");
            
            for(int i=0; i<this.listaClientes.size();i++){
                writer.println("Cliente "+(i+1));
                writer.println(i+1);
                writer.println(this.listaClientes.get(i).getNombre());
                writer.println(this.listaClientes.get(i).getApellidos());
                writer.println(this.listaClientes.get(i).getDni());
                writer.println(this.listaClientes.get(i).getTelefono());
            }            
            writer.close();
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Error en el sistema");
            e.printStackTrace();
        }
    }
    
    public void leeNumeroHabitaciones()
    {
        try
        {
            String numeroHabitacion = "";
            
            File archivo= new File("numeroHabitacion.txt");
            FileReader fr = new FileReader(archivo);
            BufferedReader br = new BufferedReader(fr);
            
            String lineaCurso1;
            
            br.readLine();
            while((lineaCurso1 = br.readLine())!=null)
            {
                Habitacion habitacion = new Habitacion(numeroHabitacion);
                
                habitacion.setNumeroHabitacion(lineaCurso1);
                this.lstNumeroHabitaciones.add(habitacion);
            }
            fr.close();       
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error en el sistema");
            e.printStackTrace();
        }
    }
    
    public void leeHabitacionesDisponibles()
    {
        try
        {
            String estado= "";
            String numeroHab="";
            String tipoHab = "";
            float costoHab = 0;
            File archivo= new File("HabDisponibles.txt");
            FileReader fr = new FileReader(archivo);
            BufferedReader br = new BufferedReader(fr);
            
            String linea1;
            br.readLine();
            while((linea1 = br.readLine())!=null)
            {
                Habitacion habitacion = new Habitacion(estado,numeroHab,tipoHab,costoHab);
                
                habitacion.setEstado(linea1);
                habitacion.setNumeroHabitacion(br.readLine());
                habitacion.setTipoHabitacion(br.readLine());
                habitacion.setCostoHabitacion(Float.parseFloat(br.readLine()));
                this.lstHabDisponibles.add(habitacion);
            }
            fr.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error al cargar datos.");
            e.printStackTrace();
        }
    }
    
    public void generaArchivoHabitacionDisponible()
    {
        try
        {
            PrintWriter writer = new PrintWriter("HabDisponibles.txt");
            
            
            writer.println("Habitaciones Disponibles: ");
            for(int i=0;i<this.lstHabDisponibles.size();i++)
            {
                writer.println(this.lstHabDisponibles.get(i).getEstado());
                writer.println(this.lstHabDisponibles.get(i).getNumeroHabitacion());
                writer.println(this.lstHabDisponibles.get(i).getTipoHabitacion());
                writer.println(this.lstHabDisponibles.get(i).getCostoHabitacion());
            }
            writer.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error en el sistema");
            e.printStackTrace();
        }
    }
    
    
    public void leeDatosReservaHabitacion() 
    {
        try{
            String codigo = "";
            String fechaReserva = "";
            String fechaIngreso = "";
            String fechaSalida = "";
            String numeroHabitacion = "";
            String tipoHabitacion = "";
            float costoHabitacion = 0;
            float montoTotal = 0;
            String nombre = "";
            String apellidos = "";
            String dni = "";
            String telefono = "";
            

            File archivo = new File("HabOcupadas.txt");
            FileReader fr = new FileReader(archivo);
            BufferedReader br = new BufferedReader(fr);   

            String lineaDatos1;
            String lineaDatos2;
            //si no hay nada para leer en el archivo txt, entonces esta parte se omitirá
            //hasta que por fin se agregue los datos de las reservas y se guarden en el archivo
            if((lineaDatos1=br.readLine()) != null)
            {   
                while((lineaDatos2=br.readLine())!=null)
                {
                    Reserva reserva = new Reserva(codigo, fechaReserva, fechaIngreso, fechaSalida,numeroHabitacion,
                            tipoHabitacion,costoHabitacion,montoTotal,nombre,apellidos,dni,telefono);
                    reserva.setCodigoReserva(lineaDatos2);
                    reserva.setFechaReserva(br.readLine());
                    reserva.setFechaIngreso(br.readLine());
                    reserva.setFechaSalida(br.readLine());
                    reserva.setNumeroHabitacion(br.readLine());
                    reserva.setTipoHabitacion(br.readLine());
                    reserva.setCostoHabitacion(Float.parseFloat(br.readLine()));
                    reserva.setMontoTotal(Float.parseFloat(br.readLine()));
                    reserva.setNombre(br.readLine());
                    reserva.setApellidos(br.readLine());
                    reserva.setDni(br.readLine());
                    reserva.setTelefono(br.readLine());
                    this.listaReservas.add(reserva);
                    br.readLine();
                }
                fr.close();    
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Error al cargar datos.");
            e.printStackTrace();
        }
    }
   
    
    public void generaArchivoReservaHabitacion()
    {
        try{
            PrintWriter writer = new PrintWriter("HabOcupadas.txt");
            
            for(int i=0;i<this.listaReservas.size();i++)
            {

                writer.println("Habitaciones Ocupadas #"+(i+1));
                writer.println(i+1);
                writer.println(this.listaReservas.get(i).getFechaReserva());
                writer.println(this.listaReservas.get(i).getFechaIngreso());
                writer.println(this.listaReservas.get(i).getFechaSalida());
                writer.println(this.listaReservas.get(i).getNumeroHabitacion());
                writer.println(this.listaReservas.get(i).getTipoHabitacion());
                writer.println(this.listaReservas.get(i).getCostoHabitacion());
                writer.println(this.listaReservas.get(i).getMontoTotal());
                writer.println(this.listaReservas.get(i).getNombre());
                writer.println(this.listaReservas.get(i).getApellidos());
                writer.println(this.listaReservas.get(i).getDni());
                writer.println(this.listaReservas.get(i).getTelefono());
            }
            writer.close();
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Error en el sistema");
            e.printStackTrace();
        }
    }
    
    public void generarTabla(){
        DefaultTableCellRenderer alinear = new DefaultTableCellRenderer();
        alinear.setHorizontalAlignment(SwingConstants.CENTER);
        
        tablaClientes.setModel(modeloTabla);
        tablaClientes.getColumnModel().getColumn(0).setPreferredWidth(90);
        tablaClientes.getColumnModel().getColumn(0).setResizable(false);
        tablaClientes.getColumnModel().getColumn(0).setCellRenderer(alinear);
        tablaClientes.getColumnModel().getColumn(1).setPreferredWidth(95);
        tablaClientes.getColumnModel().getColumn(1).setResizable(false);
        tablaClientes.getColumnModel().getColumn(2).setPreferredWidth(158);
        tablaClientes.getColumnModel().getColumn(2).setResizable(false);
        tablaClientes.getColumnModel().getColumn(3).setPreferredWidth(95);
        tablaClientes.getColumnModel().getColumn(3).setResizable(false);
        tablaClientes.getColumnModel().getColumn(4).setPreferredWidth(100);
        tablaClientes.getColumnModel().getColumn(4).setResizable(false);
        tablaClientes.getColumnModel().getColumn(4).setCellRenderer(alinear);
             
        for(int i=0;i<listaClientes.size();i++)
        {
            modeloTabla.insertRow(i, new Object[]{});
            modeloTabla.setValueAt(listaClientes.get(i).getCodigoCliente(), i, 0);
            modeloTabla.setValueAt(listaClientes.get(i).getNombre(), i, 1);
            modeloTabla.setValueAt(listaClientes.get(i).getApellidos(), i, 2);
            modeloTabla.setValueAt(listaClientes.get(i).getDni(), i, 3);
            modeloTabla.setValueAt(listaClientes.get(i).getTelefono(), i, 4);
        }
    }
    
    public void generarComboBoxHabitaciones()
    {
        for(int i=0;i<lstHabDisponibles.size();i++)
        {
            if(lstHabDisponibles.get(i).getEstado().equals("Disponible"))
            {
                cmbHabitacion.addItem(this.lstHabDisponibles.get(i).getNumeroHabitacion());     
            } 
        }
    }
    
    
}
